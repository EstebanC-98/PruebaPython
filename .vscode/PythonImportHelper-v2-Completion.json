[
    {
        "label": "label",
        "importPath": "cProfile",
        "description": "cProfile",
        "isExtraImport": true,
        "detail": "cProfile",
        "documentation": {}
    },
    {
        "label": "sys,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys.",
        "description": "sys.",
        "detail": "sys.",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "pyqtSlot",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.ui",
        "description": "selenium.webdriver.support.ui",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.ui",
        "documentation": {}
    },
    {
        "label": "expected_conditions",
        "importPath": "selenium.webdriver.support",
        "description": "selenium.webdriver.support",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support",
        "documentation": {}
    },
    {
        "label": "WebDriverException",
        "importPath": "selenium.common.exceptions",
        "description": "selenium.common.exceptions",
        "isExtraImport": true,
        "detail": "selenium.common.exceptions",
        "documentation": {}
    },
    {
        "label": "obtener_usuarios",
        "importPath": "mysql_python",
        "description": "mysql_python",
        "isExtraImport": true,
        "detail": "mysql_python",
        "documentation": {}
    },
    {
        "label": "obtener_credenciales",
        "importPath": "mysql_python",
        "description": "mysql_python",
        "isExtraImport": true,
        "detail": "mysql_python",
        "documentation": {}
    },
    {
        "label": "agregar_usuario",
        "importPath": "mysql_python",
        "description": "mysql_python",
        "isExtraImport": true,
        "detail": "mysql_python",
        "documentation": {}
    },
    {
        "label": "mysql.connector",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mysql.connector",
        "description": "mysql.connector",
        "detail": "mysql.connector",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "VentanaInicioSesion",
        "kind": 6,
        "importPath": "config.index",
        "description": "config.index",
        "peekOfCode": "class VentanaInicioSesion(QWidget):\n    def __init__(self):\n        super().__init__()\n        self.setWindowTitle(\"Inicio de Sesión en Instagram\")\n        self.setFixedSize(700,500)\n        # Obtener la lista de usuarios desde la base de datos\n        self.usuarios = obtener_usuarios()\n        # Widgets\n        self.usuario_label = QLabel(\"Usuarios:\")\n        self.lista_usuarios = QListWidget()",
        "detail": "config.index",
        "documentation": {}
    },
    {
        "label": "DialogoAgregarUsuario",
        "kind": 6,
        "importPath": "config.index",
        "description": "config.index",
        "peekOfCode": "class DialogoAgregarUsuario(QDialog):\n    def __init__(self):\n        super().__init__()\n        self.setWindowTitle(\"Agregar Usuario\")\n        self.setGeometry(200, 200, 300, 100)\n        # Widgets\n        self.usuario_label = QLabel(\"Usuario:\")\n        self.usuario_line_edit = QLineEdit()\n        self.contrasena_label = QLabel(\"Contraseña:\")\n        self.contrasena_line_edit = QLineEdit()",
        "detail": "config.index",
        "documentation": {}
    },
    {
        "label": "iniciar_sesion_instagram",
        "kind": 2,
        "importPath": "config.index",
        "description": "config.index",
        "peekOfCode": "def iniciar_sesion_instagram(usuario, contrasena):\n    global driver\n    try:\n        driver = webdriver.Chrome()\n        driver.get(\"https://www.instagram.com\")\n        # Esperar a que el campo de usuario sea visible\n        campo_usuario = WebDriverWait(driver, 10).until(EC.visibility_of_element_located((By.NAME, \"username\")))\n        # Esperar a que el campo de contraseña sea visible\n        campo_contrasena = WebDriverWait(driver, 10).until(EC.visibility_of_element_located((By.NAME, \"password\")))\n        # Ingresar el usuario y la contraseña",
        "detail": "config.index",
        "documentation": {}
    },
    {
        "label": "driver",
        "kind": 5,
        "importPath": "config.index",
        "description": "config.index",
        "peekOfCode": "driver = None\n# Función para iniciar sesión en Instagram\ndef iniciar_sesion_instagram(usuario, contrasena):\n    global driver\n    try:\n        driver = webdriver.Chrome()\n        driver.get(\"https://www.instagram.com\")\n        # Esperar a que el campo de usuario sea visible\n        campo_usuario = WebDriverWait(driver, 10).until(EC.visibility_of_element_located((By.NAME, \"username\")))\n        # Esperar a que el campo de contraseña sea visible",
        "detail": "config.index",
        "documentation": {}
    },
    {
        "label": "obtener_usuarios",
        "kind": 2,
        "importPath": "config.mysql_python",
        "description": "config.mysql_python",
        "peekOfCode": "def obtener_usuarios():\n    # Establecer la conexión a la base de datos\n    conn = mysql.connector.connect(\n        host=\"localhost\",\n        user=\"root\",\n        password=\"\",\n        database=\"login\"\n    )\n    # Crear el cursor para ejecutar consultas\n    cursor = conn.cursor()",
        "detail": "config.mysql_python",
        "documentation": {}
    },
    {
        "label": "agregar_usuario",
        "kind": 2,
        "importPath": "config.mysql_python",
        "description": "config.mysql_python",
        "peekOfCode": "def agregar_usuario(usuario, contrasena):\n    # Establecer la conexión a la base de datos\n    conn = mysql.connector.connect(\n        host=\"localhost\",\n        user=\"root\",\n        password=\"\",\n        database=\"login\"\n    )\n    # Crear el cursor para ejecutar consultas\n    cursor = conn.cursor()",
        "detail": "config.mysql_python",
        "documentation": {}
    },
    {
        "label": "obtener_contrasena",
        "kind": 2,
        "importPath": "config.mysql_python",
        "description": "config.mysql_python",
        "peekOfCode": "def obtener_contrasena(usuario):\n    # Establecer la conexión a la base de datos\n    conn = mysql.connector.connect(\n        host=\"localhost\",\n        user=\"root\",\n        password=\"\",\n        database=\"login\"\n    )\n    # Crear el cursor para ejecutar consultas\n    cursor = conn.cursor()",
        "detail": "config.mysql_python",
        "documentation": {}
    },
    {
        "label": "obtener_credenciales",
        "kind": 2,
        "importPath": "config.mysql_python",
        "description": "config.mysql_python",
        "peekOfCode": "def obtener_credenciales(usuario):\n    # Establecer la conexión a la base de datos\n    conn = mysql.connector.connect(\n        host=\"localhost\",\n        user=\"root\",\n        password=\"\",\n        database=\"login\"\n    )\n    # Crear el cursor para ejecutar consultas\n    cursor = conn.cursor()",
        "detail": "config.mysql_python",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": "env.Scripts.activate_this",
        "description": "env.Scripts.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))",
        "detail": "env.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": "env.Scripts.activate_this",
        "description": "env.Scripts.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)",
        "detail": "env.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": "env.Scripts.activate_this",
        "description": "env.Scripts.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix",
        "detail": "env.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": "env.Scripts.activate_this",
        "description": "env.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "env.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV_PROMPT\"]",
        "kind": 5,
        "importPath": "env.Scripts.activate_this",
        "description": "env.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "env.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": "env.Scripts.activate_this",
        "description": "env.Scripts.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "env.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": "env.Scripts.activate_this",
        "description": "env.Scripts.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "env.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": "env.Scripts.activate_this",
        "description": "env.Scripts.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "env.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": "env.Scripts.activate_this",
        "description": "env.Scripts.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": "env.Scripts.activate_this",
        "documentation": {}
    }
]